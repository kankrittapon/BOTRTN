using Microsoft.Playwright;

public class LoginOptions
{
    public string? Url { get; set; }
    public string UserSelector { get; set; } = "#email";
    public string PassSelector { get; set; } = "#pass";
    public string SubmitSelector { get; set; } = "button[type=submit]";

    // ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡∏ß‡∏£‡πÄ‡∏´‡πá‡∏ô element ‡∏ô‡∏µ‡πâ (‡πÄ‡∏ä‡πà‡∏ô avatar/logout/menu)
    public string? LoggedInCheckSelector { get; set; }

    // ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤ landing ‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡πÉ‡∏™‡πà selector ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏≠
    public string? AfterLoginWaitSelector { get; set; }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ 2FA ‡πÉ‡∏™‡πà selector ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™
    public string? TwoFactorSelector { get; set; }

    public int WaitTimeout { get; set; } = 30000;
}

public static class Login
{
    /// <summary>
    /// ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (‡πÉ‡∏ä‡πâ Persistent Context ‡∏à‡∏∞‡∏à‡∏≥ session ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á)
    /// Credentials ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å UserSettings.json ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ override ‡∏î‡πâ‡∏ß‡∏¢ ENV ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    /// </summary>
    public static async Task EnsureAsync(
        IBrowserContext context,
        RunnerSettings settings,
        BrowserProfileSettings profile,
        string userEnv = "APP_USER",
        string passEnv = "APP_PASS",
        LoginOptions? options = null)
    {
        options ??= FromSettings(settings);
        if (string.IsNullOrWhiteSpace(options.Url))
            throw new ArgumentException("Login URL is not configured.");

        // ‡∏≠‡πà‡∏≤‡∏ô credentials: UserSettings.json > ENV
        var username = !string.IsNullOrWhiteSpace(profile.Credentials.User)
            ? profile.Credentials.User!.Trim()
            : Environment.GetEnvironmentVariable(userEnv);

        var password = !string.IsNullOrWhiteSpace(profile.Credentials.Pass)
            ? profile.Credentials.Pass!
            : Environment.GetEnvironmentVariable(passEnv);

        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
            throw new LoginFailedException(
                $"Credentials missing. ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå \"{profile.Name}\" ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î ENV {userEnv}/{passEnv}.");

        var page = context.Pages.FirstOrDefault() ?? await context.NewPageAsync();

        // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á LoggedInCheckSelector ‡πÅ‡∏•‡∏∞ element ‡∏ô‡∏±‡πâ‡∏ô "‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô"
        if (!string.IsNullOrWhiteSpace(options.LoggedInCheckSelector))
        {
            try
            {
                var ok = await page.Locator(options.LoggedInCheckSelector!).First.IsVisibleAsync(new() { Timeout = 1200 });
                if (ok)
                {
                    Console.WriteLine("‚úÖ Already logged in (detected LoggedInCheckSelector).");
                    return;
                }
            }
            catch { /* ignore: ‡πÑ‡∏°‡πà‡∏°‡∏µ element ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å */ }
        }

        Console.WriteLine("‚û°Ô∏è  Navigating to login page‚Ä¶");
        await page.GotoAsync(options.Url, new() { WaitUntil = WaitUntilState.DOMContentLoaded, Timeout = options.WaitTimeout });

        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å "‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô" ‡∏à‡∏£‡∏¥‡∏á
        await page.Locator(options.UserSelector).First.WaitForAsync(new()
        {
            Timeout = options.WaitTimeout,
            State = WaitForSelectorState.Visible
        });
        await page.Locator(options.PassSelector).First.WaitForAsync(new()
        {
            Timeout = options.WaitTimeout,
            State = WaitForSelectorState.Visible
        });

        Console.WriteLine("‚úçÔ∏è  Filling credentials‚Ä¶");
        await page.FillAsync(options.UserSelector, username, new() { Timeout = options.WaitTimeout });
        await page.FillAsync(options.PassSelector, password, new() { Timeout = options.WaitTimeout });

        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° "‡πÄ‡∏ù‡πâ‡∏≤" ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å
        Task? tLoggedIn = null;
        Task? tAfter = null;
        Task tIdle = page.WaitForLoadStateAsync(LoadState.NetworkIdle, new() { Timeout = options.WaitTimeout });

        if (!string.IsNullOrWhiteSpace(options.LoggedInCheckSelector))
            tLoggedIn = page.Locator(options.LoggedInCheckSelector!).First.WaitForAsync(new()
            {
                Timeout = options.WaitTimeout,
                State = WaitForSelectorState.Visible
            });

        if (!string.IsNullOrWhiteSpace(options.AfterLoginWaitSelector))
            tAfter = page.Locator(options.AfterLoginWaitSelector!).First.WaitForAsync(new()
            {
                Timeout = options.WaitTimeout,
                State = WaitForSelectorState.Visible
            });

        Task? t2fa = null;
        if (!string.IsNullOrWhiteSpace(options.TwoFactorSelector))
            t2fa = page.Locator(options.TwoFactorSelector!).First.WaitForAsync(new()
            {
                Timeout = options.WaitTimeout,
                State = WaitForSelectorState.Visible
            });

        Console.WriteLine("üîê Submitting login‚Ä¶");
        await page.ClickAsync(options.SubmitSelector, new() { Timeout = options.WaitTimeout });

        // ‡πÅ‡∏Ç‡πà‡∏á‡∏Å‡∏±‡∏ô‡∏£‡∏≠: LoggedInCheck / AfterLogin / 2FA / NetworkIdle
        var waiters = new List<Task> { tIdle };
        if (tLoggedIn != null) waiters.Add(tLoggedIn);
        if (tAfter != null) waiters.Add(tAfter);
        if (t2fa != null) waiters.Add(t2fa);

        Task winner;
        try
        {
            winner = await Task.WhenAny(waiters);
        }
        catch (Exception e)
        {
            await CaptureErrorScreenshot(page, "login_wait_error");
            throw new Exception("Login wait failed.", e);
        }

        if (t2fa != null && winner == t2fa)
        {
            Console.WriteLine("üõ°Ô∏è  2FA is required. Please complete it manually in the browser.");
            // ‡∏£‡∏≠‡∏à‡∏ô‡∏ú‡πà‡∏≤‡∏ô 2FA ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥‡∏ß‡πà‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            if (tLoggedIn != null)
                await tLoggedIn; // ‡∏à‡∏∞ timeout ‡πÄ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        }
        else
        {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 2FA: ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô (‡∏à‡∏≤‡∏Å LoggedInCheck/AfterLogin/Idle)
            if (tLoggedIn != null)
            {
                // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô LoggedInCheck ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°
                try { await tLoggedIn; } catch { /* ‡∏ö‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ element ‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÜ */ }
            }
        }

        var loginError = await DetectKnownLoginErrorAsync(page);
        if (!string.IsNullOrWhiteSpace(loginError))
        {
            Console.WriteLine($"‚ö†Ô∏è ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô: {loginError}");
            throw new LoginFailedException(loginError);
        }

        Console.WriteLine("‚úÖ Login ensure complete.");
    }

    private static LoginOptions FromSettings(RunnerSettings settings)
    {
        var s = settings.Login;
        return new LoginOptions
        {
            Url = s.Url,
            UserSelector = s.UserSelector,
            PassSelector = s.PassSelector,
            SubmitSelector = s.SubmitSelector,
            LoggedInCheckSelector = s.LoggedInCheckSelector,
            AfterLoginWaitSelector = s.AfterLoginWaitSelector,
            TwoFactorSelector = s.TwoFactorSelector,
            WaitTimeout = s.WaitTimeout
        };
    }

    private static async Task<string?> DetectKnownLoginErrorAsync(IPage page)
    {
        var knownErrors = new (string Selector, string Message)[]
        {
            ("div._9ay7", "The email address you entered isn't connected to an account.")
        };

        foreach (var (selector, message) in knownErrors)
        {
            var elements = page.Locator(selector);
            var count = await elements.CountAsync();
            for (var i = 0; i < count; i++)
            {
                var element = elements.Nth(i);
                try
                {
                    if (!await element.IsVisibleAsync())
                        continue;

                    var text = (await element.InnerTextAsync()).Trim();
                    if (text.Contains(message, StringComparison.OrdinalIgnoreCase))
                        return message;
                }
                catch
                {
                    // ignore: element might disappear during read
                }
            }
        }

        return null;
    }

    private static async Task CaptureErrorScreenshot(IPage page, string prefix)
    {
        try
        {
            Directory.CreateDirectory("artifacts");
            var name = $"{prefix}_{DateTime.Now:yyyyMMdd_HHmmss}.png";
            await page.ScreenshotAsync(new() { Path = Path.Combine("artifacts", name), FullPage = true });
            Console.WriteLine($"üñºÔ∏è  Saved error screenshot: artifacts/{name}");
        }
        catch { /* ignore */ }
    }
}
